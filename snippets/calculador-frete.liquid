<style>
  .container-frete {
    display: flex
;
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
    width: 100%;
    max-width: 400px;
  }
  .label-frete {
     font-weight: 700;
    font-size: 14px;
    line-height: 16px;
    color: #939598;
  }
  .frete-input {
    display: flex
;
    flex-direction: row;
    align-items: flex-start;
    padding: 0;
    gap: 8px;
    width: 100%;
    height: 52px;
  }
  .main-input {
display: flex
;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    flex: 1 1 100%;
    height: 52px;
    background: #FFFFFF;
    border: 1px solid #6D6E71;
    border-radius: 8px;
  }
  .label-frete-text {
    font-size: 16px;
    line-height: 19px;
    color: #231F20;
    height: 48px;
    border-radius: 10px;
    border: none !important;
    margin: -10px -10px -10px -10px;
    padding-left: 10px;
    box-shadow: none !important;
    outline: none !important;
    flex: 1 1 auto;
    width: 100%;
  }
  .delivery-icon {
      width: 20px;
      height: 20px;
  }
  .tertiary-button {
     display: inline-flex
;
    flex-direction: row;
    align-items: center;
    padding: 0 1rem;
    height: inherit;
    background: transparent;
    width: 180px;
    border: 1px solid #6D6E71;
    border-radius: 8px;
    justify-content: center;
    cursor: pointer;
  }
  .calculator-icon {
    width: 15px;
    height: 15px;
    margin-right: 5px;
  }
  .button-text-frete {
      font-size: 16px;
      line-height: 19px;
      color: #FFFFFF;
  }
  .td-frete-dinamico-result {
    margin-top: 10px;
  }
  .td-frete-dinamico-location {
        font-size: 13px;
  }
</style>
<div class="container-frete td-frete-dinamico">
  <div class="label-frete">Calcular frete</div>
  <div class="frete-input">
    <div class="main-input">
      <input id="td-frete-dinamico-cep" class="label-frete-text" placeholder="Seu CEP">
      <svg
        class="delivery-icon"
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="12"
        viewBox="0 0 16 12"
        fill="none"
      >
        <path fill-rule="evenodd" clip-rule="evenodd" d="M2 1.25C2 0.835786 2.33579 0.5 2.75 0.5H9.7414C10.9692 0.5 12.0483 1.31394 12.3856 2.49452L12.8125 3.98862C12.837 4.07452 12.9055 4.1408 12.9922 4.16247L14.6744 4.58303C15.4535 4.77779 16 5.47776 16 6.28078V7.5C16 8.21077 15.5763 8.82258 14.9676 9.09657C14.9889 9.2279 15 9.36266 15 9.5C15 10.8807 13.8807 12 12.5 12C11.1193 12 10 10.8807 10 9.5C10 9.41563 10.0042 9.33223 10.0123 9.25H6.98766C6.99582 9.33223 7 9.41563 7 9.5C7 10.8807 5.88071 12 4.5 12C3.11929 12 2 10.8807 2 9.5C2 9.14445 2.07422 8.80623 2.20802 8.5H1.75C1.33579 8.5 1 8.16421 1 7.75C1 7.33579 1.33579 7 1.75 7H4.25C4.27988 7 4.30935 7.00175 4.33831 7.00514C4.39177 7.00173 4.44568 7 4.5 7C5.19935 7 5.83163 7.28716 6.28536 7.75H10.7146C11.1684 7.28716 11.8007 7 12.5 7C13.1982 7 13.8296 7.28626 14.2832 7.74781C14.4056 7.73157 14.5 7.62681 14.5 7.5V6.28078C14.5 6.16606 14.4219 6.06606 14.3106 6.03824L12.6284 5.61769C12.0217 5.466 11.542 5.00205 11.3702 4.4007L10.9433 2.9066C10.79 2.36997 10.2995 2 9.7414 2H2.75C2.33579 2 2 1.66421 2 1.25ZM4.5 10.5C5.05228 10.5 5.5 10.0523 5.5 9.5C5.5 8.94772 5.05228 8.5 4.5 8.5C3.94772 8.5 3.5 8.94772 3.5 9.5C3.5 10.0523 3.94772 10.5 4.5 10.5ZM12.5 10.5C13.0523 10.5 13.5 10.0523 13.5 9.5C13.5 8.94772 13.0523 8.5 12.5 8.5C11.9477 8.5 11.5 8.94772 11.5 9.5C11.5 10.0523 11.9477 10.5 12.5 10.5Z" fill="#231F20"/>
        <path d="M1.25 4C0.835786 4 0.5 4.33579 0.5 4.75C0.5 5.16421 0.835786 5.5 1.25 5.5H6.25C6.66421 5.5 7 5.16421 7 4.75C7 4.33579 6.66421 4 6.25 4H1.25Z" fill="#231F20"/>
      </svg>
    </div>
    <button class="tertiary-button" id="td-frete-dinamico-btn">
      <svg
        class="calculator-icon"
        xmlns="http://www.w3.org/2000/svg"
        width="12"
        height="14"
        viewBox="0 0 12 14"
        fill="none"
      >
        <path fill-rule="evenodd" clip-rule="evenodd" d="M2.5 3.25C2.5 2.69772 2.94772 2.25 3.5 2.25H8.5C9.05228 2.25 9.5 2.69772 9.5 3.25V6.25C9.5 6.80228 9.05228 7.25 8.5 7.25H3.5C2.94772 7.25 2.5 6.80228 2.5 6.25V3.25ZM4 5.75V3.75H8V5.75H4Z" fill="white"/>
        <path d="M2.5 8.75C2.5 8.33579 2.83579 8 3.25 8H4.75C5.16421 8 5.5 8.33579 5.5 8.75C5.5 9.16421 5.16421 9.5 4.75 9.5H3.25C2.83579 9.5 2.5 9.16421 2.5 8.75Z" fill="white"/>
        <path d="M7.25 8C6.83579 8 6.5 8.33579 6.5 8.75C6.5 9.16421 6.83579 9.5 7.25 9.5H8.75C9.16421 9.5 9.5 9.16421 9.5 8.75C9.5 8.33579 9.16421 8 8.75 8H7.25Z" fill="white"/>
        <path d="M2.5 11C2.5 10.5858 2.83579 10.25 3.25 10.25H4.75C5.16421 10.25 5.5 10.5858 5.5 11C5.5 11.4142 5.16421 11.75 4.75 11.75H3.25C2.83579 11.75 2.5 11.4142 2.5 11Z" fill="white"/>
        <path d="M7.25 10.25C6.83579 10.25 6.5 10.5858 6.5 11C6.5 11.4142 6.83579 11.75 7.25 11.75H8.75C9.16421 11.75 9.5 11.4142 9.5 11C9.5 10.5858 9.16421 10.25 8.75 10.25H7.25Z" fill="white"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M2.75 0C1.23122 0 0 1.23122 0 2.75V11.25C0 12.7688 1.23122 14 2.75 14H9.25C10.7688 14 12 12.7688 12 11.25V2.75C12 1.23122 10.7688 0 9.25 0H2.75ZM1.5 2.75C1.5 2.05964 2.05964 1.5 2.75 1.5H9.25C9.94036 1.5 10.5 2.05964 10.5 2.75V11.25C10.5 11.9404 9.94036 12.5 9.25 12.5H2.75C2.05964 12.5 1.5 11.9404 1.5 11.25V2.75Z" fill="white"/>
      </svg>
      <span class="button-text-frete" data-text="Calcular" onclick="generateShippingRates(this)">Calcular</span>
    </button>
  </div>
  <div class="td-frete-dinamico-result">
        <div id="frete-danger" class="alert alert-danger" role="alert" style="display:none"></div>
        <div id="frete-aviso" class="alert alert-warning" role="alert" style="display:none"></div>
        <div id="frete-sucesso" class="alert alert-success" role="alert" style="display:none"></div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function () {
  const wrapper = document.querySelector('.td-frete-dinamico');
  const zipInput = wrapper.querySelector('#td-frete-dinamico-cep');
  const btn = wrapper.querySelector('#td-frete-dinamico-btn');
  const freteDanger = wrapper.querySelector('#frete-danger');
  const freteAviso = wrapper.querySelector('#frete-aviso');
  const freteSucesso = wrapper.querySelector('#frete-sucesso');

  // Monitora alterações no campo de quantidade
  const quantityInput = document.querySelector('input[name="quantity"]');
  if (quantityInput) {
    quantityInput.addEventListener('input', async function () {
      const zip = zipInput.value.replace(/\D/g, '');
      const cepRegex = /^[0-9]{8}$/;

      if (zip && cepRegex.test(zip)) {
        await generateShippingRates(btn);
      }
    });
  }

  window.generateShippingRates = async (btn) => {
    event.preventDefault();
    const spinnerHtml = `
        <span>Carregando...</span>
    `;
    btn.innerHTML = spinnerHtml;

    resetMessages();

    const zip = zipInput.value.replace(/\D/g, '');
    const cepRegex = /^[0-9]{8}$/;

    if (!cepRegex.test(zip)) {
      showWarningMessage('Formato de CEP Inválido.');
      btn.innerHTML = btn.dataset.text;
      return;
    }

    try {
      await tryCalculateShippingRates(btn, zip);
    } catch (error) {
      console.error(error);
      showDangerMessage('Ocorreu um erro ao calcular o frete.');
      btn.innerHTML = btn.dataset.text;
    }
  };

  async function tryCalculateShippingRates(btn, cepUnmasked) {
    const country = 'BR';
    const brasilApiUrl = `https://brasilapi.com.br/api/cep/v1/${cepUnmasked}`;
    let data;

    try {
      const response = await fetch(brasilApiUrl);
      if (!response.ok) throw new Error("Erro ao buscar CEP na BrasilAPI");
      data = await response.json();
    } catch (error) {
      showWarningMessage('CEP não encontrado.');
      btn.innerHTML = btn.dataset.text;
      return;
    }

    const formattedLocation = formatLocation(data);
    freteSucesso.innerHTML = `<p class="td-frete-dinamico-location"><strong>${formattedLocation}</strong></p>`;
    const province = data.state;

    const cartResponse = await fetch('/cart.js', { method: 'GET' });
    const cartData = await cartResponse.json();
    const originalItems = cartData.items || [];
    const hasItems = originalItems.length > 0;

    if (hasItems) {
      const backupCart = originalItems.map(item => ({ id: item.variant_id, quantity: item.quantity }));
      await fetch('/cart/clear.js', { method: 'POST' });
      await addTemporaryProduct();
      await calculateShippingRates(cepUnmasked, country, province);
      await fetch('/cart/clear.js', { method: 'POST' });

      for (const item of backupCart) {
        await fetch('/cart/add.js', {
          method: 'POST',
          body: JSON.stringify({ id: item.id, quantity: item.quantity }),
          headers: { 'Content-Type': 'application/json' },
        });
      }
    } else {
      await addTemporaryProduct();
      await calculateShippingRates(cepUnmasked, country, province);
      await fetch('/cart/clear.js', { method: 'POST' });
    }

    btn.innerHTML = btn.dataset.text;
  }
async function addTemporaryProduct() {
  const urlParams = new URLSearchParams(window.location.search);
  const variantId = urlParams.get('variant');
  const quantInput = document.querySelector('.product .product__info-container .product-form .product-form__buttons .quantity__input');
  const quantidade = quantInput.value;
  

  if (variantId) {
    // Se houver uma variante na URL, adiciona a variante ao carrinho
    await fetch('/cart/add.js', {
      method: 'POST',
      body: JSON.stringify({ id: variantId, quantity: quantidade }),
      headers: { 'Content-Type': 'application/json' },
    });
  } else {
    // Caso contrário, adiciona o produto pelo handle
    const productHandle = window.location.pathname.split('/').pop(); // Extrai o handle do produto da URL
    const productResponse = await fetch(`/products/${productHandle}.js`);
    const productData = await productResponse.json();

    if (productData.variants && productData.variants.length > 0) {
      const firstVariantId = productData.variants[0].id;
      await fetch('/cart/add.js', {
        method: 'POST',
        body: JSON.stringify({ id: firstVariantId, quantity: quantidade }),
        headers: { 'Content-Type': 'application/json' },
      });
    } else {
      console.error('Nenhuma variante encontrada para o produto.');
    }
  }
}

  async function calculateShippingRates(cepUnmasked, country, province) {
    const ratesUrl = `/cart/shipping_rates.json?shipping_address[zip]=${cepUnmasked}&shipping_address[country]=${country}&shipping_address[province]=${province}`;
    const ratesResponse = await fetch(ratesUrl, { method: 'GET' });
    const ratesData = await ratesResponse.json();

    if (ratesResponse.ok && ratesData.shipping_rates.length > 0) {
      let ratesHtml = '';
      ratesData.shipping_rates.forEach(rate => {
        const formattedPrice = rate.price === 0 ? 'Grátis' : formatCurrency(rate.price);
        const deliveryDays = rate.delivery_days && rate.delivery_days.length > 0 ? formatDeliveryDays(rate.delivery_days) : '';
        ratesHtml += `<div><strong>- ${rate.name}</strong>: ${formattedPrice} ${deliveryDays}</div>`;
      });
      freteSucesso.innerHTML += ratesHtml;
      freteSucesso.style.display = 'block';
    } else {
      showWarningMessage('Não foi possível encontrar opções de frete para o CEP informado.');
    }
  }

  function resetMessages() {
    freteDanger.style.display = 'none';
    freteAviso.style.display = 'none';
    freteSucesso.style.display = 'none';
    freteDanger.innerHTML = '';
    freteAviso.innerHTML = '';
    freteSucesso.innerHTML = '';
  }

  function showDangerMessage(message) {
    freteDanger.innerHTML = `<p class="mb-0">${message}</p>`;
    freteDanger.style.display = 'block';
  }

  function showWarningMessage(message) {
    freteAviso.innerHTML = `<p class="mb-0">${message}</p>`;
    freteAviso.style.display = 'block';
  }

  function formatLocation(data) {
    return `${data.city} - ${data.neighborhood || ''} - ${data.street || ''}`;
  }

  function formatDeliveryDays(deliveryDays) {
    const lastDay = deliveryDays[deliveryDays.length - 1];
    return lastDay === 1 ? '- 1 dia útil' : `- ${lastDay} dias úteis`;
  }

  function formatCurrency(value) {
    return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);
  }

  function getFormData(form) {
    const formData = new FormData(form);
    const object = {};
    formData.forEach((value, key) => (object[key] = value));
    return object;
  }

  zipInput.addEventListener('input', function (e) {
    const value = e.target.value.replace(/\D/g, '');
    e.target.value = value.length > 5 ? `${value.slice(0, 5)}-${value.slice(5, 8)}` : value;
  });
});
</script>
